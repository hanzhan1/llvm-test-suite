use strict;
use warnings;

BEGIN
{
    use lib $ENV{ICS_PERLLIB};
}

use File::Basename;
use File::Spec;
use File::Copy;

use XML::Simple;
use Data::Dumper;
local $Data::Dumper::Sortkeys = 1;
local $Data::Dumper::Terse = 1;
local $Data::Dumper::Indent = 1;

my $command_status = 0;
my $command_output = "";

my $test_suite_repo = '.';
my $test_suite_repo_rev = '';
my $test_suite_repo_date = '';
my $testbase = "/rdrive/tests/mainline/CT-SpecialTests/llvm-test-suite";

my $sycl_dir = '';

sub main
{
    $test_suite_repo = File::Spec->rel2abs($test_suite_repo);
    $sycl_dir = "$test_suite_repo/SYCL";

    check_src();

    execute("cd $sycl_dir && find -iname '*.cpp' | grep -vw 'Inputs'");
    my @list = split( "\n", $command_output);
    execute("rm -rf config_sycl && mkdir config_sycl");

    my $tests = {};
    foreach my $t (@list)
    {
        my $path;
        if ( $t =~ /(.*)\.cpp$/) {
            $path = $1;
        } else {
            die "Wrong regexp";
        }

        $path =~ s/^\./SYCL/;
        my $name = $path;
        my $short_name = basename( $path);
        $path = dirname( $path);
        $name =~ s/[\/\/\-\.]/_/g;
        $name = lc $name;
	$name =~ s/^sycl_//g;
        my $r = { name => $name, path => $path, fullpath =>"$path/$short_name.cpp", short_name => $short_name};

        $tests->{ $name} = $r;

        print( Dumper( $r));
        my $xml_text = gen_test( $r);
        print2file( $xml_text, "./config_sycl/TEMPLATE_llvm_test_suite_sycl.xml");
    }

    print2file( gen_suite( $tests), "llvm_test_suite_sycl.xml");
    print scalar keys %{ $tests};
}

sub check_src
{
    execute( "cd $sycl_dir && git log -1 ./");

    if ( $command_output =~ m/commit (.*)/)
    {
        $test_suite_repo_rev = $1;
    }
    if ( $command_output =~ m/Date:(.*)/)
    {
        $test_suite_repo_date = $1;
    }
}

sub gen_suite
{
    my $tests = shift;
    ###
    my $xml = {};
    my $descr = "Port of llvm-test-suite-sycl.\n";
    $descr .= "Suite is autogenerated by suite_generator_sycl.pl that you can find in the root dir of suite\n";
    $descr .= "Sources repo git-amr-2.devtools.intel.com/gerrit/icl_tst-llvm-project-llvm-test-suite\n";
    $descr .= "Last Changed Revision: $test_suite_repo_rev $test_suite_repo_date\n";

    $xml->{description} = { content => $descr};
    $xml->{files}       = { file => [ { path => 'cmake'}, { path => 'tools'}, { path => 'CMakeLists.txt'}, { path => 'litsupport'}, { path => 'lit.cfg'}, { path => 'lit.site.cfg.in'}, { path => 'SYCL'}, { path => '$INFO_TDRIVE/ref/lit'}, { path => 'config_sycl'}]};

    my @strings = ();
    my $pre_xml_file = "${testbase}/llvm_test_suite_sycl.xml";
    if ( -e $pre_xml_file ) {
        open my $fh, '<', $pre_xml_file or die "Could not open '$pre_xml_file'!\n";
        while (my $line = <$fh>) {
            chomp $line;
            push(@strings, $line)
        }
    }

    foreach my $testname ( sort keys %{ $tests})
    {
        my @pre_xml = ();
        my $pre_xml_name = "";

        if ( @strings != 0 ) {
            @pre_xml = grep /testName="$testname"/, @strings;
        }
        if (@pre_xml != 0 and $pre_xml[0] =~ m/configFile="([^\s]*\.xml)"/) {
            $pre_xml_name = $1;
            push @{ $xml->{tests}{test}}, { configFile => "$pre_xml_name", testName => $testname};
            my $pre_xml_file = basename($pre_xml_name);
            if (! -f "$pre_xml_file") {
                copy("${testbase}/$pre_xml_name", "./config_sycl/") or die "copy failed: $!";
            }
        } else {
            push @{ $xml->{tests}{test}}, { configFile => "config_sycl/TEMPLATE_llvm_test_suite_sycl.xml", testName => $testname};
        }
    }

    return XMLout( $xml, xmldecl => '<?xml version="1.0" encoding="UTF-8" ?>', RootName => 'suite');
}

sub gen_test
{
    my $r = shift;
    my $xml = {};
    $xml->{driverID} = 'llvm_test_suite_sycl';
    $xml->{name}     = 'TEMPLATE';
    $xml->{description} = { content => "This config file is used for several tests.\nIt must have a non-empty 'decription' field\nand name='TEMPLATE'. "};

    print2file( "$r->{path}/$r->{short_name}.cpp", "./config_sycl/$r->{name}.info");

    return XMLout( $xml, xmldecl => '<?xml version="1.0" encoding="UTF-8" ?>', RootName => 'test');
}

sub print2file
{
    my $s = shift;
    my $file = shift;
    ###
    open FD, ">$file";

    print FD $s;
    close FD;
}

sub dump2file
{
    my $r = shift;
    my $file = shift;
    ###
    print2file( Dumper( $r), $file);
}

sub execute
{
    my $cmd = shift;
    ###

    print "$cmd\n";
    $command_output = `$cmd 2>&1`;
    my $code = $?;
    my $perl_err        = $code & ( ( 1 << 8) - 1);
    my $shell_err       = $code >> 8;

    $command_status = $shell_err;

    return ( $command_status, $command_output);
}
main();
